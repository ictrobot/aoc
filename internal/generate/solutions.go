package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"text/template"
)

func generateSolutionsFile(baseDir string) error {
	dates, err := getDates(baseDir)
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "finding solutions: %v\n", err)
		os.Exit(1)
	}

	f, err := os.Create(filepath.Join(baseDir, "internal", "solution", "solution_gen.go"))
	if err != nil {
		return err
	}

	defer func(f *os.File) {
		_ = f.Close()
	}(f)

	if err := solutionsTemplate.Execute(f, dates); err != nil {
		return err
	}

	return nil
}

func getDates(baseDir string) (map[int][]int, error) {
	dates := make(map[int][]int)

	paths, err := filepath.Glob(filepath.Join(baseDir, "internal", "aoc[0-9][0-9][0-9][0-9]", "day[0-9][0-9]"))
	if err != nil {
		return nil, err
	}

	for _, path := range paths {
		_, dayDir := filepath.Split(path)
		day, err := strconv.Atoi(dayDir[3:])
		if err != nil {
			return nil, fmt.Errorf("failed to extract day from path: %w", err)
		}

		_, yearDir := filepath.Split(filepath.Dir(path))
		year, err := strconv.Atoi(yearDir[3:])
		if err != nil {
			return nil, fmt.Errorf("failed to extract year from path: %w", err)
		}

		dates[year] = append(dates[year], day)
	}

	return dates, nil
}

var solutionsTemplate = template.Must(template.New("").Parse(`// Code generated by internal/generate; DO NOT EDIT.
package solution

import (
	{{- range $year, $solution := . }}{{- range $day := $solution }}
	y{{ $year }}d{{ printf "%02d" $day }} "github.com/ictrobot/aoc-go/internal/aoc{{ $year }}/day{{ printf "%02d" $day }}"
	{{- end }}{{- end }}
)

// Years returns a int slice containing years with solution
func Years() []int {
	return []int{
{{- range $year, $solution := . }}
		{{ $year }},
{{- end }}
	}
}

// Days returns a int slice containing solution for the given year with a solution
func Days(year int) []int {
	switch year {
{{- range $year, $solution := . }}
	case {{ $year }}:
		return []int{
{{- range $day := $solution }}
			{{ $day }},
{{- end }}
		}
{{- end }}
	}
	return nil
}

// For returns an implementation of a solution for the given year & day
func For(year, day int) Solution {
	switch year {
{{- range $year, $solution := . }}
	case {{ $year }}:
		switch day {
		{{- range $day := $solution }}
		case {{ $day }}:
			return &y{{ $year }}d{{ printf "%02d" $day }}.Day{{ printf "%02d" $day }}{}
		{{- end }}
		}
{{- end }}
	}
	return nil
}
`))
